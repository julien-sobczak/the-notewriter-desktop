@import url('https://fonts.googleapis.com/css2?family=Noto+Emoji&family=Poiret+One&family=Roboto:ital,wght@0,400;0,500;0,700;0,900;1,400;1,500;1,700;1,900&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Pacifico&family=Roboto+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap');

:root {
  --color-separator: #DDD;
  --color-separator-dark: gray;
  --color-background-light: #F9F9F9;
  --color-text-dimmed: gray;
  --desktop-layout-margin: 0;
  --desktop-layout-radius: 0;

  --top-bar-height: 2rem;
  --left-bar-width: 48px;
  --cmdk-list-height: 2rem;

  --gray1: hsl(0, 0%, 99%);
  --gray2: hsl(0, 0%, 97.3%);
  --gray3: hsl(0, 0%, 95.1%);
  --gray4: hsl(0, 0%, 93%);
  --gray5: hsl(0, 0%, 90.9%);
  --gray6: hsl(0, 0%, 88.7%);
  --gray7: hsl(0, 0%, 85.8%);
  --gray8: hsl(0, 0%, 78%);
  --gray9: hsl(0, 0%, 56.1%);
  --gray10: hsl(0, 0%, 52.3%);
  --gray11: hsl(0, 0%, 43.5%);
  --gray12: hsl(0, 0%, 9%);
}

*,
*::after,
*::before {
  box-sizing: border-box;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/*
 * @NOTE: Prepend a `~` to css file paths that are in your node_modules
 *        See https://github.com/webpack-contrib/sass-loader#imports
 */
body {
  position: relative;
  color: black;
  height: 100vh;
  font-family: sans-serif;
  overflow-y: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
}

*::-webkit-scrollbar {
  /* Chrome-specific. Hide the scrollbar but scrolling is still possible. */
  /* TODO find a long-term solution for other browsers. */
  display: none;
}

a:hover {
  opacity: 1;
  text-decoration: none;
}

#root {
  width: 100%;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

button {
  all: unset;
  cursor: pointer;
}

button:focus {
  outline: revert;
}

svg {
  display: inline-block;
}

/* Common */

.hidden {
  display: none;
}

.Screen {
  width: 100%;
}

table.List {
  border-collapse: collapse;
  border-spacing: 0.5rem;

  td, th {
    padding: 0.5em 1em;
  }

  tbody tr {
    /* Ensure borders are visible across the row */
    border-collapse: separate;
  }

  tbody tr + tr {
    border-top: 1px solid var(--color-separator-dark); /* Or any color you prefer */
  }
}

.top-left {
  position: absolute;
  left: 0.5rem;
  top: 0.5rem;
}

.centered {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* <Slug> */

.Slug {
  font-family: 'Roboto Mono', monospace;
  font-size: 0.8rem;
  color: var(--color-text-dimmed);
  background-color: var(--color-background-light);
  padding: 0.25rem 0.5rem;
  border-radius: var(--desktop-layout-radius);
  border: 1px solid var(--color-separator-dark);
}

/* <DailyQuote> */

.DailyQuote {
  width: 100%;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: 'Poiret One', cursive;
  font-size: 1.5rem;
  padding: 4rem;
}

.Main {
  width: 100%;
  height: 100vh;
}

.MainMenu {
  position: relative;
  display: flex;
  height: 100%;
}

.TopBar {
  padding: 0.25rem;
  height: var(--top-bar-height);
  text-align: center;
  font-size: 0.70em;
  border-bottom: 1px solid var(--color-separator);

  /* Make the frameless windows draggable using the top bar (similar to other applications such as Slack Desktop)
  /* https://stackoverflow.com/questions/44818508/how-do-i-move-a-frameless-window-in-electron-without-using-webkit-app-region */
  -webkit-app-region: drag; /* NB: The property must be reset on child element to make them focusable. */
}
.TopBar input {
  border-radius: 0.25rem;
  border: 1px solid var(--color-separator) !important;
  box-shadow: none !important;
  background-color: var(--color-background-light);
  width: 300px;
  -webkit-app-region: none;
}
.TopBar input::placeholder {
  color: var(--color-text-dimmed);
  text-align: center;
}
.TopBar .RepositoryButtonGroup {
  float: right;
  -webkit-app-region: none;
}
.TopBar .RepositoryButtonGroup button {
  padding: 0.25rem 0.5rem;
  margin: 0 0.1rem;
  background: transparent;
  border: none;
  color: var(--color-text-dimmed);
  border: 1px solid white;
}
.TopBar .RepositoryButtonGroup button.selected {
  border: 1px solid black;
  color: black;
  border-radius: 0.25rem;
}

.ActivityBar {
  width: var(--left-bar-width);
  height: 100%;
  border-right: 1px solid var(--color-separator);
}
.ActivityBar ul {
  display: flex;
  flex-direction: column;
  padding: 0;
  margin: 0;
}
.ActivityBar li {
  list-style-type: none;
  align-items: center;
  justify-content: center;
  display: flex;
  width: 48px;
  height: 48px;
  font-size: 24px;
  color: var(--color-text-dimmed);
}
.ActivityBar li.selected {
  color: black;
}

/* Note */

.RenderedNote {
  border: 1px solid var(--color-separator-dark);
  border-radius: var(--desktop-layout-radius) var(--desktop-layout-radius) 0 var(--desktop-layout-radius);
  background: white;
  margin: 0.5rem;
}
.LayoutGrid .RenderedNote {
  flex-grow: 1; /* use all available space */
}

.Actions {
  cursor: move;
  line-height: 1;
}

.ZenMode .Actions,
.RenderedNote .Actions {
  /* Move the button on the same line as the title to reduce space */
  float: right;
}

.RenderedNoteTitle,
.RenderedNoteContent {
  padding: 0.5em 1em;
}
.RenderedNoteTitle h1 {
  display: inline-block;
  font-size: 1rem;
}

.RenderedNoteContent {
  font-size: 0.8rem;
}
.RenderedNoteContent.Preview {
  max-height: 20em;
  overflow: auto; /* show scrollbar only when needed */
}
.RenderedNoteContent pre {
  background-color: #FAFAFA;
  overflow-x: scroll;
  /* padding: 0.5rem; FIXME bug the parent container exceed the size of its parent. */
}
.RenderedNoteContent blockquote {
  position: relative;
  padding-left: 3em;
  font-style: italic;
}
.RenderedNoteContent blockquote::before {
  font-family: Arial;
  content: "\201C";
  color: black;
  font-size: 4em;
  position: absolute;
  left: 10px;
  top: -20px;
}
.RenderedNoteContent figcaption {
  padding-left: 3em;
}
.RenderedNoteContent a {
  color: black !important; /* Don't put too much emphasis on external links. We want to focus on offline notes. */
}
.RenderedNoteContent .missing { /* Used on dangling medias */
  width: 32px;
  height: 32px;
}

.RenderedNoteMetadata {
  background: white;
}
.RenderedNoteMetadata ul,
.Actions ul {
  display: flex;
  flex-direction: row;
  margin: 0;
  padding: 0;
}
.Actions ul {
  justify-content: flex-end;
}
.RenderedNoteMetadata ul li,
.Actions ul li {
  list-style-type: none;
  margin: 0.25em 0.5em;
  padding: 0.25em;
  border-radius: var(--desktop-layout-radius);
}

.RenderedNoteMetadata li {
  font-family: monospace;
  font-size: 0.8em;
  background: var(--color-background-light);
  color: var(--color-text-dimmed);
}

.RenderedNoteComment {
  padding: 0.25em 0.5em;
  font-family: 'Pacifico', cursive;
  font-size: 90%;

}


.Hello {
  background-color: black;
  display: none; /* FIXME remove, only keep there to have an example of how to include an image */
}

/* Resizing based on https://stackoverflow.com/questions/46044589/dynamically-resize-columns-in-css-grid-layout-with-mouse */
.Grid {
  width: 100%;
  height: 100vh;
}
.Grid, .Container, .HorizontalPane, .VerticalPane { /* FIXME still useful */
  display: flex;
  position: relative;
  margin: var(--desktop-layout-margin);
  overflow: auto;
  flex-grow: 1; /* Fill space equally */
}
.Grid, .Container, .VerticalPane {
  flex-direction: row;
}
.HorizontalPane {
  flex-direction: column;
}
.Grid > * {
  resize: horizontal;
}
.HorizontalPane > * {
  resize: horizontal;
}
.VerticalPane > * {
  resize: vertical;
}
.Note {
  padding: 1em;
  margin: 1em;
}
.PaneContainer, .NoteContainer {
  border: 1px dotted var(--color-separator);
  margin: var(--desktop-layout-margin);
  border-radius: var(--desktop-layout-radius);
  width: 100%;
  height: 100%;
}

/* Tricks to make the UI more clean */

/* 1. Highlight the current container on hover */
.NoteContainer:hover {
  border: 1px dotted var(--color-separator-dark);
}
/* 2. Reveal the note actions on hover */
.RenderedNote > .Actions {
  visibility: hidden !important;
}
.RenderedNote:hover > .Actions {
  visibility: visible !important;
}


/* Browser + Bookmarker */

.Browser, .Bookmarker {
  display: flex;
  flex-direction: row;
  width: 100%;
}
.LeftPanel {
  height: 100%;
  font-size: 0.9em;
  border-right: 1px solid var(--color-separator);
}

/* Bookmarker */

.BookmarkTitle h1 {
  /* Note title are HTML <h1> element */
  font-size: inherit !important;
  font-weight: normal;
  display: inline;
}

.Bookmarker .LeftPanel ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}
.Bookmarker .LeftPanel li {
  margin: 0;
  padding: 0.5rem;
  cursor: pointer;
  border-top: 1px dotted var(--color-separator);
  border-bottom: 1px dotted var(--color-separator);
}

.BookmarkRelativePath {
  font-size: 0.8em;
  font-family: monospace;
  text-align: right;
}

/* Browser */

.Browser .LeftPanel select {
  border: none;
  width: 100%;
  text-align: right;
  padding: 0.25rem;
  border-bottom: 1px solid var(--color-separator);
}
.Browser .LeftPanel .directory {
  width: 250px; /* to avoid resizing when switching between mode */
}
.BrowserEditor {
  height: 100%;
  overflow: scroll;
  flex-grow: 2; /* Use remaining space */
  background-color: var(--color-background-light);
}

/* Browser .directory */
/* See https://dgreene1.github.io/react-accessible-treeview/docs/examples-DirectoryTree */

.directory {
  user-select: none;
  padding: 20px;
  border-radius: 0.4em;
}

.directory .tree,
.directory .tree-node,
.directory .tree-node-group {
  list-style: none;
  margin: 0;
  padding: 0;
}

.directory .tree-branch-wrapper,
.directory .tree-node__leaf {
  outline: none;
  outline: none;
}

.directory .tree-node {
  cursor: pointer;
}

.directory .tree-node:hover {
  background: rgba(255, 255, 255, 0.1);
}

.directory .tree .tree-node--focused {
  background: rgba(255, 255, 255, 0.2);
}

.directory .tree .tree-node--selected {
  font-weight: 600;
}

.directory .tree-node__branch {
  display: block;
}

.directory .icon {
  vertical-align: middle;
  padding-right: 5px;
  display: inline-block;
}


/* NoteContainer */

.NoteContainer .Header {
  display: flex;
  flex-direction: row;
  justify-content: flex-end; /* Ensure .Actions floats to the right */
}
.NoteContainer .Name {
  flex-grow: 2;
  padding: 0.5rem;
  font-size: 0.8rem;
  color: var(--color-text-dimmed);
}

.NoteContainer .Content {
  display: flex;
  position: relative;
  height: 100%; /* Useful to use offsetHeight in JavaScript */
}
.NoteContainer .Content.LayoutGrid {
  flex-wrap: wrap;
}
.NoteContainer .Content.LayoutList {
  flex-direction: column;
}
.NoteContainer .Content.LayoutFree {
  display: block;
  position: relative; /* Notes will be positioned using static values */
}
.NoteContainer .Content.LayoutFree .RenderedNote {
  position: absolute;
  resize: both;
  z-index: 0;
}
.LayoutGrid > .RenderedNote {
  width: 20em;
}
.LayoutList > .RenderedNote {
  /* flex-direction is already columns */
}

/* Added when the user drags a note */
.prevent-select .RenderedNote .RenderedNoteContent,
.prevent-select .RenderedNote .RenderedNoteTitle,
.prevent-select .RenderedNote .RenderedNoteMetadata,
.prevent-select .RenderedNote .RenderedNoteComment {
  /* If we don't disable text selection, the drag stops as soon as the user hover some text. */
  user-select: none;
}

.dragging {
  border: 2px solid gray;
}

/*
 * Desks
 */

.DeskContainer {
  width: 100%;
  overflow: scroll;
}

/* The menu listing all opened desks */

.DeskContainer > nav ul {
  display: flex;
  flex-direction: row;
  padding: 0;
  margin: 0;
}
.DeskContainer > nav li {
  display: flex;
  justify-content: center;
  align-items: center;
  list-style-type: none;
  font-size: 0.8rem;
  padding: 0.5rem;
  cursor: pointer;
  color: var(--color-text-dimmed);
}
.DeskContainer > nav li span {
  padding: 0 1rem;
}
.DeskContainer > nav li.selected {
  border-bottom: 1px solid var(--color-text-dimmed);
  color: black;
}

.DeskContainer .Desk {
  display: none;
  margin: 0.5rem;
  /* TODO now on hover a section, make the border gray */
}
.DeskContainer .Desk > * {
  flex-grow: 1;
}
.DeskContainer .Desk.selected {
  display: flex;
}


/* .SearchPanel */

.SearchPanel {
  position: absolute;
  top: 0;
  width: 300px;
  height: 100%;
  right: 0;
  background: white;
  border-left: 1px solid var(--color-separator-dark);
  box-shadow: 0px 5px 5px 5px rgba(0, 0, 0, 0.1);
  z-index: 100; /* must be visible on top of other pages */
  overflow-y: scroll;
}
.SearchPanel.expanded {
  width: 100% !important;
}

.SearchPanel .RenderedNote {
  overflow: visible;
}


/* cmdk */
/* Based on Linear style available at https://github.com/pacocoursey/cmdk/blob/main/website/styles/cmdk/linear.scss */

.CmdK {
  position: fixed;
  /* Align with the top bar */
  top: var(--top-bar-height);
  /* Center horizontally */
  left: 50%;
  transform: translateX(calc(-50% + var(--left-bar-width)));
}

[cmdk-root] {
  max-width: 640px;
  width: 100%;
  background: #ffffff;
  border-radius: 8px;
  overflow: hidden;
  padding: 0;
  box-shadow: 0 16px 70px rgb(0 0 0 / 20%);
}

[cmdk-linear-badge] {
  height: 24px;
  padding: 0 8px;
  font-size: 12px;
  color: var(--gray11);
  background: var(--gray3);
  border-radius: 4px;
  width: fit-content;
  display: flex;
  align-items: center;
  margin: 16px 16px 0;
}

[cmdk-input] {
  border: none;
  width: 100%;
  font-size: 18px;
  padding: 20px;
  outline: none;
  background: var(--bg);
  color: var(--gray12);
  border-bottom: 1px solid var(--gray6);
  border-radius: 0;
  caret-color: #6e5ed2;
  margin: 0;
}
[cmdk-input]::placeholder {
  color: var(--gray9);
}

[cmdk-item] {
  content-visibility: auto;
  cursor: pointer;
  height: 2rem;
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 0 16px;
  color: var(--gray12);
  user-select: none;
  will-change: background, color;
  transition: all 150ms ease;
  transition-property: none;
  position: relative;
}
[cmdk-item][data-selected='true'] {
  background: var(--gray2);
}
[cmdk-item][data-selected='true']:after {
  content: '';
  position: absolute;
  left: 0;
  z-index: 123;
  width: 3px;
  height: 100%;
  background: var(--color-separator-dark);
}

[cmdk-item][data-disabled='true'] {
  color: var(--gray8);
  cursor: not-allowed;
}

[cmdk-item]:active {
  transition-property: background;
  background: var(--gray4);
}

[cmdk-item] + [cmdk-item] {
  margin-top: 4px;
}

[cmdk-list] {
  height: min(300px, var(--cmdk-list-height));
  max-height: 400px;
  overflow: auto;
  overscroll-behavior: contain;
  transition: 100ms ease;
  transition-property: height;
}

[cmdk-group-heading] {
  user-select: none;
  font-size: 12px;
  color: var(--gray11);
  padding: 0 8px;
  display: flex;
  align-items: center;
}

[cmdk-empty] {
  font-size: 14px;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 64px;
  white-space: pre-wrap;
  color: var(--gray11);
}

.CommandItemMeta {
  margin-left: auto;
  background: var(--gray3);
  padding: 0.25rem 0.5rem;
  font-size: 0.7rem;
  border-radius: 2px;
}

/* Misc */

.NoteType {
  /* Simply display a small rounded shape */
  display: inline-block;
  border: 1px solid black;
  width: 0.6rem;
  height: 0.6rem;
  border-radius: 50%;
  margin-right: 0.5rem;
}

/* ZenMode */

/* The class .ZenModeEnabled is appended on root element only when the zen mode is chosen */
.ZenModeEnabled .TopBar,
.ZenModeEnabled .ActivityBar {
  /* Make sure only the zen mode is visible */
  display: none;
}
.ZenMode, .Inspiration {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}
.ZenMode .Actions,
.Inspiration .Actions {
  flex-grow: 0;
  display: flex;
  justify-content: flex-end;
  width: 100%;
}
.ZenMode .Content,
.Inspiration .Content {
  width: 100%;
  flex-grow: 2;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.ZenMode .Footer {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
  color: var(--color-text-dimmed);
  text-align: right;
  font-size: 0.7rem;
}
.ZenMode .Footer > div {
  padding: 0.5rem;
}
.ZenMode .Footer h1 {
  display: inline-block;
  font-size: 0.7rem;
}

.ZenMode .RenderedNote,
.Inspiration .RenderedNote {
  border: none !important;
}
.ZenMode .RenderedNoteContent {
  font-size: 1.2rem;
}

.SpeedAction {
  font-size: 0.7rem;
}

.instruction {
  font-weight: 100;
}

ul.categories {
  list-style-type: none;
  display: flex;
  flex: row;
  margin: 0;
  padding: 0;
}
ul.categories li {
  border: 1px solid black;
  border-radius: 50vh;
  padding: 0.5rem 1rem;
  margin: 0.5rem;
  cursor: pointer;
}

/* Timer */

.Timer {
  background: -webkit-linear-gradient(left, var(--color-separator-dark) 50%, white 50%); /* TODO find a way to avoid -webkit */
  border-radius: 100%;
  height: calc(var(--size) * 1px);
  width: calc(var(--size) * 1px);
  position: relative;
  animation: time calc(var(--duration) * 1s) steps(1000, start) infinite;

}
.Timer .mask {
  border-radius: 100% 0 0 100% / 50% 0 0 50%;
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 50%;
  animation: mask calc(var(--duration) * 1s) steps(500, start) infinite;
  transform-origin: 100% 50%;
}
@keyframes time {
  100% {
      transform: rotate(360deg);
  }
}
@keyframes mask {
  0% {
      background: white;
      transform: rotate(0deg);
  }
  50% {
      background: white;
      transform: rotate(-180deg);
  }
  50.01% {
      background: var(--color-separator-dark);
      transform: rotate(0deg);
  }
  100% {
      background: var(--color-separator-dark);
      transform: rotate(-180deg);
  }
}

/* <Decks> */

.Decks {
  background-color: var(--color-background-light);
}


/* <RenderedFlashcard> */

.RenderedFlashcard {
  background-color: white;

  /* Make sure the buttons are always positioning at the same place on screen */
  width: 30rem;
  min-height: 60vh;
  max-height: 60vh;
  display: flex;
  flex-direction: column;
}

.RenderedFlashcard hr {
  margin: 1em 0;
}

.RenderedFlashcard .Source {
  font-size: 50%;
  text-align: right;
  padding: 0.5em;
  color: gray;
  font-style: italic;
}
.RenderedFlashcard .ButtonGroup {
  margin-top: 1em;
  width: 100%;
  display: flex;
  justify-content: space-between; /* or: space-evenly */
  align-items: center;            /* optional: vertical alignment */
}
.ShowAnswerButton {
  background-color: #465A64;
  color: white;
  flex: 1;
  text-align: center;
}
.FeedbackButton {
  padding: 0.5em 1em;
  flex: 1;             /* each child takes equal space */
  text-align: center;
  transition: width 3s ease;
}
.FeedbackTooHard, .FeedbackTooEasy, .FeedbackConfirmation {
  color: yellow;
  background-color: black;
}
.FeedbackCancellation {
  background-color: darkred;
  flex: 0.2; /* Make the cancel button smaller as "Too" buttons are already difficult to reach. Confirmation is only a safe guard but the user will almost always confirm. */
}
.FeedbackTooHard, .FeedbackTooEasy {
  flex: 0.3; /* "Too" options are exceptional, make them smaller */
  flex-grow: 1;
}
.FeedbackHard {
  background-color: #D32F2D;
  color: white;
}
.FeedbackAgain {
  background-color: #465A64;
  color: white;
}
.FeedbackGood {
  background-color: #4CB050;
  color: white;
}
.FeedbackEasy {
  background-color: #36A9F5;
  color: white;
}

/* Flashcard Markdown Content Formatting */
.RenderedFlashcard .Content {
  padding: 1em;

  /* Flashcard height is fixed to stick the feedback buttons. */
  flex-grow: 1;
  overflow-y: auto; /* show scrollbar only when needed */

  p {
    margin: 0.5em 0;
  }
  pre {
    border: 1px solid var(--color-separator-dark);
    padding: 0.5em;
    background-color: var(--color-background-light);
    overflow-x: auto; /* show scrollbar only when needed */
  }
}
